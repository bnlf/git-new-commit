#!/usr/bin/python

from subprocess import call

summary_max_chars = 50

class GitMessageWriter:
	
	def write(self, message):
		call(["git commit", "-m", message])


class StdoutMessageWriter:

	def write(self, message):
		print("git commit -m \"" + message + "\"")


class MessageBuildElementChain:

	def ask_user(self, question, options = None):
		if options is None: 
			return raw_input(question + "\n")
		else:
			selected_index = 0
			while(selected_index <= 0 or selected_index >= len(options)):
				i = 0
				for option in options:
					i = i + 1
					print(str(i) + " - " + option)
				selected_index = int(raw_input())
			return options[selected_index - 1]


	def call_successor(self, built_message):
		if not (self.successor is None):
			self.successor.handle(built_message)

	def chain(self, successor):
		self.successor = successor
		return successor

class LabelMessageBuildElementChain(MessageBuildElementChain):

	def handle(self, built_message):
		label = MessageBuildElementChain.ask_user(self, "Classification:", ["BUGFIX", "NEWFEATURE", "MISC"])
		built_message += label
		MessageBuildElementChain.call_successor(self, built_message)

class SummaryMessageBuildElementChain(MessageBuildElementChain):

	def handle(self, built_message):
		available_chars = summary_max_chars - len(built_message) - 1
		summary = MessageBuildElementChain.ask_user(self, "Summary message - only " + str(available_chars) + " characters available:")
		built_message += " " + summary
		MessageBuildElementChain.call_successor(self, built_message)

class RemarksMessageBuildElementChain(MessageBuildElementChain):

	def handle(self, built_message):
		remarks = MessageBuildElementChain.ask_user(self, "Remarks:")
		built_message += " - " + remarks
		MessageBuildElementChain.call_successor(self, built_message)

class WriterMessageBuildElementChain(MessageBuildElementChain):

	def __init__(self, writer):
			self.writer = writer

	def handle(self, built_message):
		self.writer.write(built_message)


chainRoot = LabelMessageBuildElementChain()
(chainRoot.chain(SummaryMessageBuildElementChain())
		  .chain(RemarksMessageBuildElementChain())
		  .chain(WriterMessageBuildElementChain(StdoutMessageWriter())))

chainRoot.handle("")